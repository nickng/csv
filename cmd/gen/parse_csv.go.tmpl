package {{ .Package }}

import "encoding/csv"

// Code generated by "github.com/nickng/csv/cmd/gen"; DO NOT EDIT.

type {{ .TypeName }}CSVParser struct {
	rd *csv.Reader
	header []string
	parsedHeader bool
}

func New{{ .TypeName }}CSVParser(rd *csv.Reader) {{ .TypeName }}CSVParser {
	return &{{ .TypeName }}CSVParser{rd:rd}
}

// Read reads one record with the underlying CSV reader and returns the
// result in a {{ .TypeName }} object.
func (p *{{ .TypeName }}CSVParser) Read() ({{ .TypeName }}, error) {
	if !p.parsedHeader {
		header, err := p.rd.Read()
		if err != nil {
			return nil, err
		}
		p.parseHeader(header)
	}
	record, err := p.rd.Read()
	if err != nil {
		return nil, err
	}
	return p.assignFields(record), nil
}

func (p *{{ .TypeName }}CSVParser) parseHeader(header []string) {
	p.header = header
	p.parsedHeader = true
}

func (p *{{ .TypeName }}CSVParser) assignFields(record []string) {{ .TypeName }} {
	var row {{ .TypeName }}
	for i, fieldValue := range record {
		switch p.header[i] {
		{{- range .Fields }}
		case "{{ .CSVFieldName }}":
			row.{{ .StructFieldName }} = fieldValue
		{{- end }}
		}
	}
	return row
}
